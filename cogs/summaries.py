import os.path
import discord
from discord.ext import commands
from datetime import datetime

#loads thumbnail used in the discord embeds
thumbnail = os.getenv('EMBED_THUMBNAIL')


def embed_generator(title: str, path: str):
    """
    Used to generate a discord embed using the standard embed template for the bot
    args:
        title (str): Title for the discord Embed
        path (str): Path to the text file
    """

    #checks if the text file exists, if not, assume path (str) to be the text
    if os.path.exists(path):
        with open(path, 'r') as f:
            text = f.read()
    else:
        text = path

    #generates discord Embed
    embed = discord.Embed(timestamp=datetime.utcnow(), title=title,
                          colour=0xB0B0BF, description=text)
    embed.set_author(name='UltraChat')
    embed.set_thumbnail(url=thumbnail)
    embed.set_footer(text="UltraChat by GDSC")

    return embed

def sorter(name):
    return int(name[:-4])
class SummariesView(discord.ui.View):
    """
    class that handles the View of the summaries along with the functionalities of the buttons
    subclass of discord.ui.View
    """
    def __init__(self, pages, num):
        super().__init__()
        self.pages = pages
        self.page = num
        self.max_num = len(pages)


    @discord.ui.button(label="<", style=discord.ButtonStyle.primary, custom_id = 'prev')
    async def button_callback(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.page >= 2:
            self.page -= 1
            await interaction.response.edit_message(embed=self.pages[self.page-1])

        elif self.page <= 1:
            self.page = self.max_num
            await interaction.response.edit_message(embed=self.pages[self.page-1])

    @discord.ui.button(label=">", style=discord.ButtonStyle.primary, custom_id = 'next')
    async def button_callback1(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.page >= self.max_num:
            self.page = 1
            await interaction.response.edit_message(embed=self.pages[self.page-1])

        elif self.page < self.max_num:
            self.page += 1
            await interaction.response.edit_message(embed=self.pages[self.page-1])


class Summaries(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="summaries")
    async def summaries(self, ctx, num: int = 1):
        """Provides an embed of all the summaries generated by the given user and buttons to itterate through them
        args:
            num (int): Summary number to start at"""

        summary_folder = f'chats/{ctx.author.name}/{ctx.message.guild.name}/summaries'

        #bound checking
        if num > len(os.listdir(summary_folder)):
            num = len(os.listdir(summary_folder))
        if num<1:
            num = 1

        pages = []

        #generates embeddings for every summary for user and appends it to pages
        for file in sorted(os.listdir(summary_folder), key=sorter):
            file_path = os.path.join(summary_folder, file)
            pages.append(embed_generator(title=f"Summary {file[:-4]}:", path=file_path))


        #if no summarries are generated by the user
        if len(pages) == 0:
            await ctx.send(f"No summaries generated by {ctx.author.name}")
            return
        await ctx.send(embed = pages[num-1], view=SummariesView
        (pages=pages, num=num))

    @commands.command(name="summary_clear",)
    async def summary_clear(self,ctx, start: int =0, stop = None):
        start = int(start)
        stop = int(stop) if stop is not None else None
        summary_folder = f'chats/{ctx.author.name}/{ctx.message.guild.name}/summaries'
        if (start>stop) and (start>0 and stop<len(os.listdir(summary_folder))):
            if stop is not None:
                for filename in os.listdir(summary_folder)[start-1:stop-1]:
                    summary = os.path.join(summary_folder, filename)
                    os.remove(summary)

        if stop is None and start > 0:
            os.remove(os.path.join(summary_folder, f"{start}.txt"))

        i = 1
        for filename in os.listdir(summary_folder):
            old_summary = os.path.join(summary_folder, filename)
            new_summary = os.path.join(summary_folder, f"{i}.txt")
            os.rename(old_summary, new_summary)
            i += 1



async def setup(bot):
    await bot.add_cog(Summaries(bot))

